import { useState, useEffect } from 'react';
import { showBackButton, hideBackButton } from '../utils/telegram';
import { getUserSettings, updateUserSettings } from '../api/users';
import '../styles/Settings.css';

function Settings({ onClose, user }) {
  const [theme, setTheme] = useState(() => {
    return localStorage.getItem('theme') || 'dark';
  });

  const [defaultCurrency, setDefaultCurrency] = useState('RUB');
  const [displayMode, setDisplayMode] = useState('converted');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    showBackButton(onClose);
    document.documentElement.setAttribute('data-theme', theme);
    loadUserSettings();
    return () => hideBackButton();
  }, []);

  const loadUserSettings = async () => {
    try {
      const settings = await getUserSettings(user.id);
      setDefaultCurrency(settings.default_currency || 'RUB');
      setDisplayMode(settings.display_mode || 'converted');
    } catch (error) {
      console.error('Error loading user settings:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleThemeChange = (newTheme) => {
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    document.documentElement.setAttribute('data-theme', newTheme);
  };

  const handleCurrencyChange = async (currency) => {
    setDefaultCurrency(currency);
    try {
      await updateUserSettings(user.id, {
        defaultCurrency: currency,
        displayMode
      });
    } catch (error) {
      console.error('Error updating currency:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  };

  const handleDisplayModeChange = async (mode) => {
    setDisplayMode(mode);
    try {
      await updateUserSettings(user.id, {
        defaultCurrency,
        displayMode: mode
      });
    } catch (error) {
      console.error('Error updating display mode:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  };

  if (loading) {
    return (
      <div className="settings">
        <div className="settings-header">
          <button className="back-btn" onClick={onClose}>‚Üê</button>
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <div style={{ width: '40px' }}></div>
        </div>
        <div className="settings-content">
          <div className="spinner"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="settings">
      <div className="settings-header">
        <button className="back-btn" onClick={onClose}>‚Üê</button>
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
        <div style={{ width: '40px' }}></div>
      </div>

      <div className="settings-content">
        <div className="settings-section">
          <h3>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</h3>
          <div className="theme-options">
            <button
              className={`theme-option ${theme === 'dark' ? 'active' : ''}`}
              onClick={() => handleThemeChange('dark')}
            >
              <span className="theme-icon">üåô</span>
              <span className="theme-label">–¢—ë–º–Ω–∞—è</span>
              {theme === 'dark' && <span className="checkmark">‚úì</span>}
            </button>
            <button
              className={`theme-option ${theme === 'light' ? 'active' : ''}`}
              onClick={() => handleThemeChange('light')}
            >
              <span className="theme-icon">‚òÄÔ∏è</span>
              <span className="theme-label">–°–≤–µ—Ç–ª–∞—è</span>
              {theme === 'light' && <span className="checkmark">‚úì</span>}
            </button>
          </div>
        </div>

        <div className="settings-section">
          <h3>–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h3>
          <div className="currency-options">
            <button
              className={`currency-option ${defaultCurrency === 'RUB' ? 'active' : ''}`}
              onClick={() => handleCurrencyChange('RUB')}
            >
              <span className="currency-symbol">‚ÇΩ</span>
              <span className="currency-label">–†—É–±–ª–∏ (RUB)</span>
              {defaultCurrency === 'RUB' && <span className="checkmark">‚úì</span>}
            </button>
            <button
              className={`currency-option ${defaultCurrency === 'USD' ? 'active' : ''}`}
              onClick={() => handleCurrencyChange('USD')}
            >
              <span className="currency-symbol">üíµ</span>
              <span className="currency-label">–î–æ–ª–ª–∞—Ä—ã (USD)</span>
              {defaultCurrency === 'USD' && <span className="checkmark">‚úì</span>}
            </button>
            <button
              className={`currency-option ${defaultCurrency === 'EUR' ? 'active' : ''}`}
              onClick={() => handleCurrencyChange('EUR')}
            >
              <span className="currency-symbol">üí∂</span>
              <span className="currency-label">–ï–≤—Ä–æ (EUR)</span>
              {defaultCurrency === 'EUR' && <span className="checkmark">‚úì</span>}
            </button>
          </div>
        </div>

        <div className="settings-section">
          <h3>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π</h3>
          <div className="display-mode-options">
            <button
              className={`display-mode-option ${displayMode === 'converted' ? 'active' : ''}`}
              onClick={() => handleDisplayModeChange('converted')}
            >
              <span className="display-mode-label">–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {defaultCurrency}</span>
              <span className="display-mode-description">
                –í—Å–µ —Å—É–º–º—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –≤–∞—à–µ–π –≤–∞–ª—é—Ç–µ
              </span>
              {displayMode === 'converted' && <span className="checkmark">‚úì</span>}
            </button>
            <button
              className={`display-mode-option ${displayMode === 'separate' ? 'active' : ''}`}
              onClick={() => handleDisplayModeChange('separate')}
            >
              <span className="display-mode-label">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã</span>
              <span className="display-mode-description">
                –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
              </span>
              {displayMode === 'separate' && <span className="checkmark">‚úì</span>}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Settings;