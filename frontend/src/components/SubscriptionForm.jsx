import { useState, useEffect } from 'react';
import { showBackButton, hideBackButton } from '../utils/telegram';
import { createSubscription, updateSubscription, deleteSubscription } from '../api/subscriptions';
import { getUserSettings } from '../api/users';
import '../styles/SubscriptionForm.css';

const PRESET_SERVICES = [
  { name: 'Netflix', icon: 'üé¨', color: '#E50914', price: 699 },
  { name: 'Spotify', icon: 'üéµ', color: '#1DB954', price: 299 },
  { name: 'YouTube Premium', icon: '‚ñ∂Ô∏è', color: '#FF0000', price: 399 },
  { name: 'Apple Music', icon: 'üéµ', color: '#FA243C', price: 299 },
  { name: 'Amazon Prime', icon: 'üì¶', color: '#FF9900', price: 599 },
  { name: 'Disney+', icon: '‚ú®', color: '#113CCF', price: 399 },
  { name: 'HBO Max', icon: 'üé≠', color: '#7D3FDC', price: 499 },
  { name: 'iCloud', icon: '‚òÅÔ∏è', color: '#3B82F6', price: 59 }
];

const POPULAR_EMOJIS = [
  // –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞
  'üé¨', 'üéµ', 'üéß', 'üéÆ', 'üì∫', 'üìª', 'üé≠', 'üé™', 'üé®', 'üé§',
  // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
  'üì±', 'üíª', '‚åö', 'üì∑', 'üñ•Ô∏è', '‚å®Ô∏è', 'üñ±Ô∏è', 'üíæ', 'üì°', 'üîå',
  // –û–±–ª–∞–∫–æ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  '‚òÅÔ∏è', 'üì¶', 'üíº', 'üìÅ', 'üóÇÔ∏è', 'üìã', 'üìä', 'üìà', 'üìâ', 'üóÉÔ∏è',
  // –°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ
  'üí™', '‚öΩ', 'üèÄ', 'üèãÔ∏è', 'üßò', 'üèÉ', 'üö¥', 'üèä', '‚õ∑Ô∏è', 'ü§∏',
  // –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏
  'üçî', 'üçï', 'üçú', 'üç±', '‚òï', 'üç∫', 'üç∑', 'ü•§', 'üç∞', 'üç©',
  // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  'üöó', 'üöï', '‚úàÔ∏è', 'üöÄ', 'üöÇ', 'üöå', 'üö≤', 'üõµ', 'üöÅ', '‚õµ',
  // –î–æ–º –∏ –±—ã—Ç
  'üè†', 'üè°', 'üõãÔ∏è', 'üõèÔ∏è', 'üöø', 'üß∫', 'üßπ', 'üßº', 'üîß', 'üî®',
  // –î–µ–Ω—å–≥–∏ –∏ –±–∏–∑–Ω–µ—Å
  'üí≥', 'üí∞', 'üíµ', 'üí∏', 'üí¥', 'üí∂', 'üí∑', 'üè¶', 'üìà', 'üíπ',
  // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  'üéì', 'üìö', 'üìñ', '‚úèÔ∏è', 'üìù', 'üñäÔ∏è', 'üìê', 'üî¨', 'üî≠', 'üéí',
  // –°–∏–º–≤–æ–ª—ã
  '‚ö°', 'üî•', '‚ù§Ô∏è', '‚≠ê', '‚ú®', 'üéØ', 'üíé', 'üèÜ', 'üéÅ', 'üîî',
  // –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–∞
  '‚òÄÔ∏è', 'üåô', '‚õÖ', 'üåßÔ∏è', '‚ùÑÔ∏è', 'üåà', 'üå∏', 'üå∫', 'üåª', 'üçÄ'
];

const PRESET_COLORS = [
  // –ö—Ä–∞—Å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
  '#E50914', '#FF0000', '#DC2626', '#EF4444', '#F87171',
  // –û—Ä–∞–Ω–∂–µ–≤—ã–µ
  '#FF9900', '#F59E0B', '#FB923C', '#FDBA74', '#FED7AA',
  // –ñ—ë–ª—Ç—ã–µ
  '#EAB308', '#FACC15', '#FDE047', '#FEF08A', '#FEF9C3',
  // –ó–µ–ª—ë–Ω—ã–µ
  '#1DB954', '#10B981', '#34D399', '#6EE7B7', '#A7F3D0',
  '#059669', '#10B981', '#14532D', '#166534', '#15803D',
  // –ì–æ–ª—É–±—ã–µ –∏ —Å–∏–Ω–∏–µ
  '#3B82F6', '#60A5FA', '#93C5FD', '#BFDBFE', '#DBEAFE',
  '#06B6D4', '#0891B2', '#0E7490', '#155E75', '#164E63',
  '#113CCF', '#2563EB', '#1D4ED8', '#1E40AF', '#1E3A8A',
  // –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –∏ —Ä–æ–∑–æ–≤—ã–µ
  '#7D3FDC', '#8B5CF6', '#A78BFA', '#C4B5FD', '#DDD6FE',
  '#EC4899', '#F472B6', '#F9A8D4', '#FBCFE8', '#FCE7F3',
  '#FA243C', '#BE123C', '#E11D48', '#F43F5E', '#FB7185',
  '#6366F1', '#818CF8', '#A5B4FC', '#C7D2FE', '#E0E7FF',
  // –°–µ—Ä—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
  '#1F2937', '#374151', '#4B5563', '#6B7280', '#9CA3AF',
  '#D1D5DB', '#E5E7EB', '#F3F4F6', '#F9FAFB', '#FFFFFF',
  '#111827', '#1C1C1E', '#2C2C2E', '#3A3A3C', '#48484A',
  '#636366', '#8E8E93', '#AEAEB2', '#C7C7CC', '#D1D1D6'
];

function SubscriptionForm({ subscription, onSave, onClose, user }) {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    currency: 'RUB',
    icon: '',
    color: '#4A90E2',
    cycle: 'Every 1 Month(s)',
    firstBill: '',
    remindMe: 'Never',
    duration: 'Forever',
    renewalType: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
  });

  const [showPresets, setShowPresets] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showColorPicker, setShowColorPicker] = useState(false);

  useEffect(() => {
    showBackButton(onClose);

    if (subscription) {
      setFormData({
        name: subscription.name,
        description: subscription.description || '',
        price: subscription.price,
        currency: subscription.currency,
        icon: subscription.icon || '',
        color: subscription.color,
        cycle: subscription.cycle,
        firstBill: subscription.first_bill?.split('T')[0] || '',
        remindMe: subscription.remind_me,
        duration: subscription.duration,
        renewalType: subscription.renewal_type || '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      });
    } else {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      loadUserDefaultCurrency();
    }

    return () => hideBackButton();
  }, [subscription]);

  const loadUserDefaultCurrency = async () => {
    try {
      const settings = await getUserSettings(user.id);
      setFormData(prev => ({
        ...prev,
        currency: settings.default_currency || 'RUB'
      }));
    } catch (error) {
      console.error('Error loading user default currency:', error);
    }
  };

  const handlePresetSelect = (preset) => {
    setFormData({
      ...formData,
      name: preset.name,
      icon: preset.icon,
      color: preset.color,
      price: preset.price
    });
    setShowPresets(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const data = {
        telegramId: user.id,
        name: formData.name,
        description: formData.description,
        price: parseFloat(formData.price),
        currency: formData.currency,
        icon: formData.icon,
        color: formData.color,
        cycle: formData.cycle,
        firstBill: formData.firstBill,
        remindMe: formData.remindMe,
        duration: formData.duration,
        categoryId: null,
        renewalType: formData.renewalType
      };

      if (subscription) {
        await updateSubscription(subscription.id, data);
      } else {
        await createSubscription(data);
      }

      onSave();
    } catch (error) {
      console.error('Error saving subscription:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    }
  };

  const handleDelete = async () => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É?')) return;

    try {
      await deleteSubscription(subscription.id, user.id);
      onSave();
    } catch (error) {
      console.error('Error deleting subscription:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    }
  };

  const getCurrencySymbol = (currency) => {
    const symbols = { 'RUB': '‚ÇΩ', 'USD': 'üíµ', 'EUR': 'üí∂' };
    return symbols[currency] || currency;
  };

  if (showPresets) {
    return (
      <div className="subscription-form">
        <div className="form-header" style={{ backgroundColor: formData.color }}>
          <button className="back-btn" onClick={onClose}>‚Üê</button>
          <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å</h2>
          <button className="custom-btn" onClick={() => setShowPresets(false)}>
            –°–≤–æ–π
          </button>
        </div>
        <div className="presets-grid">
          {PRESET_SERVICES.map(preset => (
            <div
              key={preset.name}
              className="preset-card"
              style={{ backgroundColor: preset.color }}
              onClick={() => handlePresetSelect(preset)}
            >
              <div className="preset-icon">{preset.icon}</div>
              <div className="preset-name">{preset.name}</div>
              <div className="preset-price">{preset.price} ‚ÇΩ</div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="subscription-form">
      <div className="form-header" style={{ backgroundColor: formData.color }}>
        <button className="back-btn" onClick={onClose}>‚Üê</button>
        <h2>{formData.name || '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'}</h2>
        {!subscription && (
          <button
            type="button"
            className="presets-link-btn"
            onClick={() => setShowPresets(true)}
          >
            –ì–æ—Ç–æ–≤—ã–µ
          </button>
        )}
      </div>

      <div className="form-preview" style={{ backgroundColor: formData.color }}>
        <div className="preview-icon">{formData.icon || '?'}</div>
        <div className="preview-price">
          {getCurrencySymbol(formData.currency)}{formData.price || '0.00'}
        </div>
      </div>

      <form onSubmit={handleSubmit} className="form-fields">
        <div className="form-field">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            placeholder="Spotify"
            required
          />
        </div>

        <div className="form-field">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <input
            type="text"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
          />
        </div>

        <div className="form-field">
          <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏)</label>
          <div className="icon-input-group">
            <input
              type="text"
              value={formData.icon}
              onChange={(e) => setFormData({ ...formData, icon: e.target.value })}
              placeholder="üéµ"
              maxLength="2"
            />
            <button
              type="button"
              className="emoji-picker-btn"
              onClick={() => setShowEmojiPicker(!showEmojiPicker)}
            >
              üòä
            </button>
          </div>
          {showEmojiPicker && (
            <div className="emoji-picker">
              {POPULAR_EMOJIS.map(emoji => (
                <button
                  key={emoji}
                  type="button"
                  className="emoji-option"
                  onClick={() => {
                    setFormData({ ...formData, icon: emoji });
                    setShowEmojiPicker(false);
                  }}
                >
                  {emoji}
                </button>
              ))}
            </div>
          )}
        </div>

        <div className="form-field">
          <label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞</label>
          <div className="color-input-group">
            <div
              className="color-preview"
              style={{ backgroundColor: formData.color }}
              onClick={() => setShowColorPicker(!showColorPicker)}
            />
            <input
              type="text"
              value={formData.color}
              onChange={(e) => setFormData({ ...formData, color: e.target.value })}
              placeholder="#4A90E2"
            />
          </div>
          {showColorPicker && (
            <div className="color-picker">
              {PRESET_COLORS.map(color => (
                <button
                  key={color}
                  type="button"
                  className="color-option"
                  style={{ backgroundColor: color }}
                  onClick={() => {
                    setFormData({ ...formData, color });
                    setShowColorPicker(false);
                  }}
                />
              ))}
            </div>
          )}
        </div>

        <div className="form-field">
          <label>–¶–µ–Ω–∞</label>
          <input
            type="number"
            step="0.01"
            value={formData.price}
            onChange={(e) => setFormData({ ...formData, price: e.target.value })}
            placeholder="299"
            required
          />
        </div>

        <div className="form-field">
          <label>–í–∞–ª—é—Ç–∞</label>
          <select
            value={formData.currency}
            onChange={(e) => setFormData({ ...formData, currency: e.target.value })}
          >
            <option value="RUB">RUB (‚ÇΩ)</option>
            <option value="USD">USD ($)</option>
            <option value="EUR">EUR (‚Ç¨)</option>
          </select>
        </div>

        <div className="form-field">
          <label>–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç—ë–∂</label>
          <input
            type="date"
            value={formData.firstBill}
            onChange={(e) => setFormData({ ...formData, firstBill: e.target.value })}
          />
        </div>

        <div className="form-field">
          <label>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å</label>
          <select
            value={formData.cycle}
            onChange={(e) => setFormData({ ...formData, cycle: e.target.value })}
          >
            <option value="Every 1 Week(s)">–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é</option>
            <option value="Every 1 Month(s)">–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü</option>
            <option value="Every 3 Month(s)">–ö–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞</option>
            <option value="Every 6 Month(s)">–ö–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤</option>
            <option value="Every 1 Year(s)">–ö–∞–∂–¥—ã–π –≥–æ–¥</option>
          </select>
        </div>

        <div className="form-field">
          <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
          <select
            value={formData.duration}
            onChange={(e) => setFormData({ ...formData, duration: e.target.value })}
          >
            <option value="Forever">–ù–∞–≤—Å–µ–≥–¥–∞</option>
            <option value="1 Year">1 –≥–æ–¥</option>
            <option value="6 Months">6 –º–µ—Å—è—Ü–µ–≤</option>
            <option value="3 Months">3 –º–µ—Å—è—Ü–∞</option>
          </select>
        </div>

        <div className="form-field">
          <label>–ù–∞–ø–æ–º–Ω–∏—Ç—å</label>
          <select
            value={formData.remindMe}
            onChange={(e) => setFormData({ ...formData, remindMe: e.target.value })}
          >
            <option value="Never">–ù–∏–∫–æ–≥–¥–∞</option>
            <option value="1 day before">–ó–∞ 1 –¥–µ–Ω—å</option>
            <option value="3 days before">–ó–∞ 3 –¥–Ω—è</option>
            <option value="1 week before">–ó–∞ –Ω–µ–¥–µ–ª—é</option>
            <option value="2 weeks before">–ó–∞ 2 –Ω–µ–¥–µ–ª–∏</option>
          </select>
        </div>

        <div className="form-field">
          <label>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ</label>
          <select
            value={formData.renewalType}
            onChange={(e) => setFormData({ ...formData, renewalType: e.target.value })}
          >
            <option value="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</option>
            <option value="–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ">–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</option>
          </select>
        </div>

        <button type="submit" className="save-btn-bottom">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>

        {subscription && (
          <button type="button" className="delete-btn" onClick={handleDelete}>
            –£–î–ê–õ–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£
          </button>
        )}
      </form>
    </div>
  );
}

export default SubscriptionForm;